// @ts-check
import { MarkdownPageEvent } from 'typedoc-plugin-markdown';
/**
 * @param {import('typedoc-plugin-markdown').MarkdownApplication} app
 */
export function load(app) {
  app.renderer.markdownHooks.on(
    'page.begin',
    () =>
      `{/** This page is autogenerated from the Python SDK. Do not edit this file as it will be replaced on the next SDK publish **/}`
  );

  app.renderer.on(MarkdownPageEvent.END, (page) => {
    // Filter out lines containing /README.mdx)
    page.contents = page.contents
      .split('\n')
      .filter((line) => !line.includes('/README.mdx)'))
      .join('\n');

    // Adjust links to work with our docs
    page.contents = page.contents
      .split('\n')
      .map((line) => fix_paths(line, page))
      .join('\n');

    // Add front matter
    page.contents =
      `---
title: ${page.model.name}
---
` + page.contents;
  });
}

/**
 * @param {string} line
 * @param {MarkdownPageEvent<import("typedoc").RouterTarget>} page
 */
function fix_paths(line, page) {
  // If the line contains .mdx then it is a link and needs to be fixed

  if (line.includes('.mdx')) {
    // extract all markdown links (might be multiple in one line)
    const regex = /\[([^\]]+)\]\(([^)]+\.mdx(?:#[^)]*)?)\)/g;
    let match;
    while ((match = regex.exec(line)) !== null) {
      const linkText = match[1];
      const linkPath = match[2];

      // The linkPath is relative to the current page. We need the full path
      // to the file in the output directory.
      // Get the current page's directory
      const currentPageDir = page.filename.replace(/\/[^/]+$/, '');
      // Construct the full path to the link
      let fullLinkPath = `${currentPageDir}/${linkPath}`;
      // If the linkPath starts with a slash, it is an absolute path
      if (linkPath.startsWith('/')) {
        // Remove the leading slash
        fullLinkPath = fullLinkPath.slice(1);
      }

      // This full link path uses the current directory. We need to replace everything before the
      // /reference/ part with a new root which should be /sdk-api/typescript/

      // Replace the current directory with the new root
      fullLinkPath = fullLinkPath.replace(
        /.*\/reference\//,
        '/sdk-api/typescript/reference/'
      );

      // Sometimes the full link contains ../ so resolve these
      // to get the correct path
      const parts = fullLinkPath.split('/');
      const resolvedParts = [];
      for (const part of parts) {
        if (part === '..') {
          // Go back one directory
          resolvedParts.pop();
        } else if (part !== '.') {
          // Add the part to the resolved path
          resolvedParts.push(part);
        }
      }
      // Join the resolved parts to get the full path
      fullLinkPath = resolvedParts.join('/');

      // Update the linkPath to use the full path
      // and replace the .mdx extension with .html
      const newLinkPath = fullLinkPath.replace(/\.mdx$/, '');

      // replace the link in the line
      line = line.replace(match[0], `[${linkText}](${newLinkPath})`);
    }
  }

  // otherwise return the line unchanged
  return line;
}
